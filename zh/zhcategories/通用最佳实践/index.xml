<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>通用最佳实践 on 软件测试同学</title><link>https://naodeng.com.cn/zh/zhcategories/%E9%80%9A%E7%94%A8%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><description>Recent content in 通用最佳实践 on 软件测试同学</description><image><title>软件测试同学</title><url>https://naodeng.com.cn/papermod-cover.png</url><link>https://naodeng.com.cn/papermod-cover.png</link></image><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Fri, 26 Jan 2024 16:06:44 +0800</lastBuildDate><atom:link href="https://naodeng.com.cn/zh/zhcategories/%E9%80%9A%E7%94%A8%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/index.xml" rel="self" type="application/rss+xml"/><item><title>UI 测试最佳实践的工具篇（二）：视觉回归测试</title><link>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-tools-visual-regression-testing/</link><pubDate>Fri, 26 Jan 2024 16:06:44 +0800</pubDate><guid>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-tools-visual-regression-testing/</guid><description>这篇博文聚焦于 UI 测试最佳实践的工具，第二篇介绍了视觉回归测试。文章详细解释了视觉回归测试在 UI 开发中的重要性，以及如何利用相关工具进行自动化视觉测试。读者将了解如何捕捉和比较页面截图，以确保界面在开发过程中的变化不影响现有的设计。通过视觉回归测试，读者能够更全面地验证 UI 的外观和布局，提高测试的全面性和准确性。</description></item><item><title>UI 测试最佳实践的工具篇（一）：一些 UI 测试问题及 Cypress 的解决方案</title><link>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-tools-ui-testing-problems-cypress/</link><pubDate>Thu, 25 Jan 2024 17:06:44 +0800</pubDate><guid>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-tools-ui-testing-problems-cypress/</guid><description>这篇博文聚焦于 UI 测试最佳实践的工具，首篇介绍一些 UI 测试问题及 Cypress 的解决方案。文章探讨了常见 UI 测试难题，详细介绍了 Cypress 框架如何提供强大的解决方案，包括实时查看、可靠性、速度等方面的优势。通过这些解决方案，读者能够更好地应对 UI 测试中的挑战，提高测试效率和可靠性。</description></item><item><title>UI 测试最佳实践的通用测试的好处篇：将测试视为文档工具</title><link>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-generic-testing-perks-tests-as-documentation/</link><pubDate>Wed, 24 Jan 2024 17:06:44 +0800</pubDate><guid>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-generic-testing-perks-tests-as-documentation/</guid><description>这篇博文强调了 UI 测试最佳实践中通用测试的好处，特别是将测试视为文档工具的优势。文章解释了通过编写清晰、可读的测试代码，测试不仅仅是验证功能的手段，还是项目文档的一部分。这种做法有助于项目团队更好地理解系统，提高协作效率，并为后续开发和维护工作提供有价值的参考。通过将测试视为文档工具，项目团队能够更好地利用测试来传递信息，确保系统的可靠性和可维护性。</description></item><item><title>UI 测试最佳实践的初学者篇：从金字塔顶层入手测试</title><link>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-beginners-top-to-botton-approach/</link><pubDate>Mon, 22 Jan 2024 17:06:44 +0800</pubDate><guid>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-beginners-top-to-botton-approach/</guid><description>这篇博文是 UI 测试最佳实践初学者篇，建议从金字塔的顶层入手测试。文章解释了在 UI 测试金字塔的顶部，即端到端测试，开始学习的优势。通过此方法，初学者能够更容易理解应用程序的整体行为，快速验证关键路径，并逐步深入学习更底层的单元测试和集成测试。这种渐进的学习方式有助于建立坚实的 UI 测试基础，提高测试覆盖率和质量。</description></item><item><title>UI 测试最佳实践的服务通信测试：检验请求和响应负载，测试监控</title><link>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-server-communication-testing-test-the-request-and-response-payloads-and-monitoring-tests/</link><pubDate>Sun, 21 Jan 2024 17:06:44 +0800</pubDate><guid>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-server-communication-testing-test-the-request-and-response-payloads-and-monitoring-tests/</guid><description>这篇博文深入探讨了 UI 测试最佳实践中的服务通信测试，重点关注请求和响应负载的验证以及测试监控。读者将学到如何有效检验 UI 与服务之间的请求和响应负载，以确保系统交互的正确性和可靠性。博文还介绍了在 UI 测试中如何进行监控，以及监测服务通信过程中的性能和可用性。通过这些实践，读者能够更全面地覆盖 UI 测试中的服务通信方面，提高测试的全面性和准确性，确保系统的正常运行。</description></item><item><title>UI 测试最佳实践的通用最佳实践（三）：将你的测试工具用作主要的开发工具和保持低抽象度以便于调试测试</title><link>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-generic-best-practices-3-use-your-testing-tool-as-your-primary-development-tool-and-keep-abstraction-low-to-ease-debugging-the-tests/</link><pubDate>Sat, 20 Jan 2024 17:06:44 +0800</pubDate><guid>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-generic-best-practices-3-use-your-testing-tool-as-your-primary-development-tool-and-keep-abstraction-low-to-ease-debugging-the-tests/</guid><description>这篇博文深入研究 UI 测试的通用最佳实践之三：将测试工具作为主要开发工具，并保持低抽象度以便于调试。文章强调将测试工具纳入主要开发过程，加强测试与开发的协同，提高代码质量。另外，博文建议保持测试脚本的低抽象度，以便更容易调试和理解。这种做法有助于加速问题排查和测试脚本的维护，从而提高 UI 测试的效率和可靠性。通过采用这些通用最佳实践，读者将能够更好地整合 UI 测试到开发流程中，实现更高效的软件开发。</description></item><item><title>UI 测试最佳实践的通用最佳实践（二）：UI 测试调试最佳实践和在测试中达到 UI 状态而无需使用 UI</title><link>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-generic-best-practices-2-ui-tests-debugging-best-practices-and-reaching-ui-state/</link><pubDate>Fri, 19 Jan 2024 13:05:44 +0800</pubDate><guid>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-generic-best-practices-2-ui-tests-debugging-best-practices-and-reaching-ui-state/</guid><description>这篇博文探讨了 UI 测试的通用最佳实践之二：UI 测试调试和无需使用 UI 达到 UI 状态。博文详细介绍了在 UI 测试中的调试技巧，包括使用断点、日志和交互式调试工具等方法，提高测试脚本的调试效率。此外，文章强调了通过直接设置应用程序状态而无需依赖 UI 元素来达到 UI 状态的方法，以提高测试速度和稳定性。通过这些实践，读者能够更好地应对 UI 测试中的调试挑战，同时优化测试脚本的执行效率。</description></item><item><title>UI 测试最佳实践的通用最佳实践（一）：等待，不要休眠和明智地为测试文件命名</title><link>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-generic-best-practices-1-await-dont-sleep-and-name-test-files-wisely/</link><pubDate>Thu, 18 Jan 2024 17:05:44 +0800</pubDate><guid>https://naodeng.com.cn/zh/posts/ui-automation-testing/ui-testing-best-practice-generic-best-practices-1-await-dont-sleep-and-name-test-files-wisely/</guid><description>这篇博文探讨了 UI 测试的通用最佳实践之一：等待策略。强调了在 UI 测试中避免使用休眠（sleep）方法，而是采用等待机制来确保测试脚本与应用程序的同步。此外，博文提倡为测试文件采用明智的命名规范，以提高代码可维护性和可读性。通过这些最佳实践，读者将更有效地编写稳健的 UI 测试脚本，确保测试的准确性和可靠性，提升整个软件开发过程的质量。</description></item></channel></rss>