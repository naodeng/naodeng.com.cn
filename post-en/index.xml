<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Post-ens on QA Discovery</title><link>https://naodeng.tech/post-en/</link><description>Recent content in Post-ens on QA Discovery</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>naodeng.tech</copyright><lastBuildDate>Fri, 03 Nov 2023 09:25:19 +0800</lastBuildDate><atom:link href="https://naodeng.tech/post-en/index.xml" rel="self" type="application/rss+xml"/><item><title>REST Assured Tutorial: Advanced Usage - Validating Responses and Logging, Filters, File Uploads</title><link>https://naodeng.tech/post-en/rest-assured-tutorial-advance-usage-verifying-response-and-logging-en/</link><pubDate>Fri, 03 Nov 2023 09:25:19 +0800</pubDate><guid>https://naodeng.tech/post-en/rest-assured-tutorial-advance-usage-verifying-response-and-logging-en/</guid><description>Advanced Usage Verifying Response Data response body assertion json assertion XML assertion Cookie assertion Status Code Assertion Header Assertion Content-Type Assertion Full body/content matching Assertion Measuring Response Time File Upload Logging Global logging configuration Steps to add global logging configuration Global Logging Code Example Viewing Global Log Output Localized logging configuration Steps to add Localized logging configuration Viewing Localized Log Output LogConfig Configuration Description Request Logging Response Logging Log if validation fails Header Blacklist Configuration Filters Ordered Filters Response Builder Advanced Usage Verifying Response Data You can verify Response status code, Response status line, Response cookies, Response headers, Response content type and Response body.</description></item><item><title>REST Assured Tutorial: Building a REST Assured Interface Automation Test Program from 0 to 1</title><link>https://naodeng.tech/post-en/rest-assured-tutorial-building-your-own-project-from-0-to-1-en/</link><pubDate>Thu, 02 Nov 2023 10:03:38 +0800</pubDate><guid>https://naodeng.tech/post-en/rest-assured-tutorial-building-your-own-project-from-0-to-1-en/</guid><description>Building a REST Assured API test project from 0 to 1 Gradle version Initialize an empty Gradle project Configuration build.gradle testng.xml configuration gradle build project and initialize initialization project directory Introduction of demo test API Get API Post API Writing Test cases Debugging test cases Viewing Test Reports Command Line Report testng html Report Maven version Initialize an empty Maven project Configuration pom.xml Configuration testng.xml initialization maven project directory The api used by Demo Writing Test cases Debugging test cases Viewing Test Reports terminal report testng html report More info Building a REST Assured API test project from 0 to 1 REST Assured supports both Gradle and Maven build tools, you can choose one of them according to your preference.</description></item><item><title>REST Assured Tutorial: Getting Started and Setting Up Your Environment</title><link>https://naodeng.tech/post-en/rest-assured-tutorial-and-environment-preparation-en/</link><pubDate>Wed, 01 Nov 2023 16:24:49 +0800</pubDate><guid>https://naodeng.tech/post-en/rest-assured-tutorial-and-environment-preparation-en/</guid><description>Introduction of RestAssured REST Assured is a Java testing framework for testing RESTful APIs that enables developers/testers to easily write and execute API tests. It is designed to make API testing simple and intuitive, while providing rich functionality and flexibility. The following are some of the key features and uses of REST Assured:
Initiating HTTP requests: REST Assured allows you to easily build and initiate HTTP GET, POST, PUT, DELETE and other types of requests.</description></item><item><title>Gatling tutorial and advanced usage: CI/CD Integration</title><link>https://naodeng.tech/post-en/gatling-tool-tutorial-ci-cd-integration-en/</link><pubDate>Mon, 30 Oct 2023 10:36:24 +0800</pubDate><guid>https://naodeng.tech/post-en/gatling-tool-tutorial-ci-cd-integration-en/</guid><description>CI/CD Integration Accessing github action Take github action as an example, and other CI tools as well.
Gradle + Scala version See the demo at https://github.com/Automation-Test-Starter/gatling-gradle-scala-demo.
Create the .github/workflows directory: In your GitHub repository, create a directory called .github/workflows. This will be where the GitHub Actions workflow files will be stored.
Create the workflow file: Create a YAML-formatted workflow file, such as gatling.yml, in the .github/workflows directory.
Edit the gatling.yml file: Copy the following into the file.</description></item><item><title>Gatling tutorial and advanced usage: Test report analysis and Performance Scenario Setting</title><link>https://naodeng.tech/post-en/gatling-tool-tutorial-advanced-usage-en/</link><pubDate>Thu, 26 Oct 2023 18:07:44 +0800</pubDate><guid>https://naodeng.tech/post-en/gatling-tool-tutorial-advanced-usage-en/</guid><description>Test report analysis Overview Overall view Open the detailed html report after the performance test execution is finished; Your report can be analyzed by metrics, active users and requests/responses over time, as well as distributions
The name of Simulation is displayed in the center of the page in the header The list on the left side shows a menu of different types of reports, which can be switched by clicking on them.</description></item><item><title>gatling tutorial: building your own gatling project from 0 to 1</title><link>https://naodeng.tech/post-en/gatling-tool-tutorial2-en/</link><pubDate>Wed, 25 Oct 2023 11:05:45 +0800</pubDate><guid>https://naodeng.tech/post-en/gatling-tool-tutorial2-en/</guid><description>Build your own Gatling project from 0 to 1 Gradle + Scala versions Create an empty Gradle project 1 2 3 mkdir gatling-gradle-demo cd gatling-gradle-demo gradle init Configure the project build.gradle Add the following to the build.gradle file in the project
You can copy the content of the build.gradle file in this project, for more configurations, please refer to the official documentation.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Plugin Configuration plugins { id &amp;#39;scala&amp;#39; // scala plugin declaration (based on the development tools plugin) id &amp;#39;io.</description></item><item><title>Gatling tutorial: Getting Started</title><link>https://naodeng.tech/post-en/gatling-tool-tutorial1-en/</link><pubDate>Tue, 24 Oct 2023 17:44:53 +0800</pubDate><guid>https://naodeng.tech/post-en/gatling-tool-tutorial1-en/</guid><description>Gatling Introduction Gatling is an open source tool for performance and load testing, especially for testing web applications. It is a high-performance tool based on the Scala programming language for simulating and measuring the performance of applications under different loads.
Here are some of the key features and benefits of Gatling:
Based on Scala programming language: Gatling&amp;rsquo;s test scripts are written in Scala, which makes it a powerful programming tool that allows users to write complex test scenarios and logic.</description></item><item><title>Introducing Bruno for Replacement Postman</title><link>https://naodeng.tech/post-en/introduction_of_bruno-en/</link><pubDate>Tue, 17 Oct 2023 11:31:43 +0800</pubDate><guid>https://naodeng.tech/post-en/introduction_of_bruno-en/</guid><description>Since Postman announced in May 2023 that it will phase out the Scratch Pad model with offline capabilities, teams that need to isolate API workspace data from third-party servers have been looking for alternatives. Teams that need to isolate API workspace data from third-party servers have had to look for alternatives. bruno is one of those alternatives: an open source desktop application designed for API testing, development, and debugging. Bruno</description></item></channel></rss>