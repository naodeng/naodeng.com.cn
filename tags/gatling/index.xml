<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gatling on QA Blog</title><link>https://naodeng.tech/tags/gatling/</link><description>Recent content in gatling on QA Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>naodeng.tech</copyright><lastBuildDate>Mon, 30 Oct 2023 10:36:24 +0800</lastBuildDate><atom:link href="https://naodeng.tech/tags/gatling/index.xml" rel="self" type="application/rss+xml"/><item><title>gatling performance testing tool advanced usage: CI/CD Integration</title><link>https://naodeng.tech/post-en/gatling-tool-intro-ci-cd-integration-en/</link><pubDate>Mon, 30 Oct 2023 10:36:24 +0800</pubDate><guid>https://naodeng.tech/post-en/gatling-tool-intro-ci-cd-integration-en/</guid><description>CI/CD Integration Accessing github action Take github action as an example, and other CI tools as well.
Gradle + Scala version See the demo at https://github.com/Automation-Test-Starter/gatling-gradle-scala-demo.
Create the .github/workflows directory: In your GitHub repository, create a directory called .github/workflows. This will be where the GitHub Actions workflow files will be stored.
Create the workflow file: Create a YAML-formatted workflow file, such as gatling.yml, in the .github/workflows directory.
Edit the gatling.yml file: Copy the following into the file.</description></item><item><title>gatling 性能测试工具进阶用法：CI/CD 集成</title><link>https://naodeng.tech/post/gatling-tool-intro-ci-cd-integration/</link><pubDate>Mon, 30 Oct 2023 10:36:24 +0800</pubDate><guid>https://naodeng.tech/post/gatling-tool-intro-ci-cd-integration/</guid><description>持续集成 接入 github action 以 github action 为例，其他 CI 工具类似 Gradle + Scala 版本 可参考 demo：https://github.com/Automation-Test-S</description></item><item><title>gatling performance testing tool advanced usage: Test report analysis and Performance Scenario Setting</title><link>https://naodeng.tech/post-en/gatling-tool-intro-advanced-usage-en/</link><pubDate>Thu, 26 Oct 2023 18:07:44 +0800</pubDate><guid>https://naodeng.tech/post-en/gatling-tool-intro-advanced-usage-en/</guid><description>Test report analysis Overview Overall view Open the detailed html report after the performance test execution is finished; Your report can be analyzed by metrics, active users and requests/responses over time, as well as distributions
The name of Simulation is displayed in the center of the page in the header The list on the left side shows a menu of different types of reports, which can be switched by clicking on them.</description></item><item><title>gatling 性能测试工具进阶用法：报告解析和场景设置</title><link>https://naodeng.tech/post/gatling-tool-intro-advanced-usage/</link><pubDate>Thu, 26 Oct 2023 18:07:44 +0800</pubDate><guid>https://naodeng.tech/post/gatling-tool-intro-advanced-usage/</guid><description>测试报告解析 总览 总览图 性能测试执行结束后打开详细的 html 报告，可以看到详细的性能测试报告； 可通过指标、活跃用户和随时间变化的请求/响应以及分布来</description></item><item><title>gatling performance testing tools: building your own gatling project from 0 to 1</title><link>https://naodeng.tech/post-en/gatling-tool-intro2-en/</link><pubDate>Wed, 25 Oct 2023 11:05:45 +0800</pubDate><guid>https://naodeng.tech/post-en/gatling-tool-intro2-en/</guid><description>Build your own Gatling project from 0 to 1 Gradle + Scala versions Create an empty Gradle project 1 2 3 mkdir gatling-gradle-demo cd gatling-gradle-demo gradle init Configure the project build.gradle Add the following to the build.gradle file in the project
You can copy the content of the build.gradle file in this project, for more configurations, please refer to the official documentation.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Plugin Configuration plugins { id &amp;#39;scala&amp;#39; // scala plugin declaration (based on the development tools plugin) id &amp;#39;io.</description></item><item><title>gatling 性能测试工具：从 0 到 1 搭建自己的 Gatling 工程</title><link>https://naodeng.tech/post/gatling-tool-intro2/</link><pubDate>Wed, 25 Oct 2023 11:05:45 +0800</pubDate><guid>https://naodeng.tech/post/gatling-tool-intro2/</guid><description>从 0 到 1 搭建自己的 Gatling 工程 Gradle + Scala 版本 创建一个空的 Gradle 工程 1 2 3 mkdir gatling-gradle-demo cd gatling-gradle-demo gradle init 配置项目 build.gradle 在 项目中 build.gradle 文件中添加以下内容 可 copy 本项目中的 build.gradle 文件内容，更多配</description></item><item><title>gatling 性能测试工具入门介绍</title><link>https://naodeng.tech/post/gatling-tool-intro1/</link><pubDate>Tue, 24 Oct 2023 17:44:53 +0800</pubDate><guid>https://naodeng.tech/post/gatling-tool-intro1/</guid><description>Gatling 介绍 Gatling 是一个用于性能测试和负载测试的开源工具，特别适用于测试 Web 应用程序。它是一个基于 Scala 编程语言的高性能工具，用于模拟并测量应用程序在不同负</description></item><item><title>Getting Started with gatling Performance Testing Tools</title><link>https://naodeng.tech/post-en/gatling-tool-intro1-en/</link><pubDate>Tue, 24 Oct 2023 17:44:53 +0800</pubDate><guid>https://naodeng.tech/post-en/gatling-tool-intro1-en/</guid><description>Gatling Introduction Gatling is an open source tool for performance and load testing, especially for testing web applications. It is a high-performance tool based on the Scala programming language for simulating and measuring the performance of applications under different loads.
Here are some of the key features and benefits of Gatling:
Based on Scala programming language: Gatling&amp;rsquo;s test scripts are written in Scala, which makes it a powerful programming tool that allows users to write complex test scenarios and logic.</description></item></channel></rss>